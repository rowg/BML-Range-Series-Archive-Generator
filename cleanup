#!/usr/bin/env perl
#cleanup.pl
# see readme

use strict ;
use warnings ;
use File::Basename ;
use File::Path ;

my $SortDir = "sortdir" ;	# the subdirectory containing all unsorted config files
my $ConfigDir = "Configs" ;	# the subdirectory containing all sorted config files
my $RangeDir = "RangeSeries" ;	# the subdirectory containing all sorted RangeSeries files

sub usage
{
	print "\nUsage: $0 archive\n\n" ;
	print "Reads an archive and tells you what's in it, then deletes the '$SortDir' subdirectory.\n" ;
}

sub main
{
	my $argc = scalar @ARGV ;
	if( $argc != 1 )
	{
		usage() ;
		print "Bad number of parameters: got $argc, was expecting 1\n" ;
		return 1 ;
	}
	my $archive_root = $ARGV[0] ;
	if( not -d $archive_root )
	{
		print "Not a directory: $archive_root\n" ;
		return 1 ;
	}
	my $err = cleanup($archive_root) ;
	return $err ;
}

sub today()
{
	my @tm = gmtime(time()) ;
	my $year = $tm[5]+1900 ;
	my $month = $tm[4]+1 ;
	my $day = $tm[3]+1 ;
	my $date = sprintf("%4d%02d%02d",$year,$month,$day) ;
	return $date ;
}

sub sortarchive($)
{
	my ( $path ) = @_ ;
	my @configlist = () ;
	my $configpath = undef ;
	my $lastsite = undef ;
	my $firstdate = $DefaultFirstDate ;
	my $lastdate = $DefaultLastDate ;
	my $fd = makefilelist($path) ;	# creates a list of all archive files in a temp file in /tmp and returns a handle
	if( not defined $fd ) { return 1 ; }
	my $err = 0 ;
	# read list of files one at a time
	while( my $line = <$fd> )
	{
		chomp($line) ;
		my ( $err, $root, $site, $dirname, $date, $filename ) ;
		# check for range series file, collect file data
		( $err, $root, $site, $date ) = parserange($line,$RangeDir) ;
		if( ! $err )
		{
			if( $date < $firstdate )
			{
				$firstdate = $date ;
			}
			if( $date > $lastdate )
			{
				$lastdate = $date ;
			}
			next ;
		}
		# check for config file, collect file data
		( $err, $root, $site, $dirname, $date, $filename ) = parseconfig($line,$SortDir) ;
		if( ! $err )
		{
			if( $date < $firstdate )
			{
				$firstdate = $date ;
			}
			if( $date > $lastdate )
			{
				$lastdate = $date ;
			}
		}
		if( $err ) { next ; }
		$configpath = "$root/$site/$ConfigDir" ;
		# create a hash for parsed fields
		my $configdata = { date => $date, dir => $dirname, file => $filename, path => $line } ;
		# check if the entry's site has changed
		if( (defined $lastsite) && ($lastsite ne $site) )
		{
			$err = sortlist(\@configlist,$configpath,$firstdate,$lastdate) ;	# fixup the config files
			@configlist = () ;
			if( $err ) { last ; }
		}
		push @configlist, $configdata ;
		$lastsite = $site ;
	}
	if( scalar @configlist > 0 )
	{
		$err = sortlist(\@configlist,$configpath,$firstdate,$lastdate) ;		# fixup the config files
	}
	close($fd) ;
	if( $err )
	{
		print "Error fixing up '$configpath'\n" ;
		return 1 ;
	}
	return 0 ;
}

sub makefilelist($)	# creates a file in /tmp containing a list of all files in the archive, opens the file and returns a handle
{
	my ( $path ) = @_ ;
	# Build a list of files under the archive root
	my $tempfilename = "/tmp/filelist.$$" ;
	my $command = "find $path -type f >$tempfilename" ;
	my $result = `$command` ;
	if( $? )
	{
		print "Error running command: '$command'\n" ;
		return undef ;
	}
	if( ! -e $tempfilename )
	{
		print "Cannot create file list in '$tempfilename'\n" ;
		return undef ;
	}
	if( -z $tempfilename )
	{
		print "No files found in '$path'\n" ;
		return undef ;
	}
	my $fd = undef ;
	if( not defined open($fd,"<",$tempfilename) )
	{
		print "Error opening temporary file '$tempfilename'\n" ;
		return undef ;
	}
	return $fd ;
}

sub parserange($$)	# parses root, site, date and file from path, eg test/BML1/RangSeries/2010/06/19/*
{
	my ( $line, $matchdir ) = @_ ;
	my ( $rootname, $site, $year, $month, $day, $date ) = undef ;
	if( $line =~ m/^(.+)\/([^\/]+?)\/$matchdir\/(\d{4})\/(\d{2})\/(\d{2})\// )	# (root)/(site)/$matchdir/(year)/(mo)/(dy)/*
	{
		$rootname = $1 ;
		$site = $2 ;
		$year = $3 ;
		$month = $4 ;
		$day = $4 ;
	}
	else
	{
		return 1 ;
	}
	if( (not defined $rootname) || ($rootname eq "") )
	{
		print "Cannot parse root name, skipping '$line'\n" ;
		return 1 ;
	}
	if( (not defined $site) || ($site eq "") )
	{
		print "Cannot parse site name, skipping '$line'\n" ;
		return 1 ;
	}
	if( (not defined $year) || ($year eq "") || ($year == 0) )
	{
		print "Cannot parse year, skipping '$line'\n" ;
		return 1 ;
	}
	if( (not defined $month) || ($month eq "") || ($month == 0) )
	{
		print "Cannot parse month, skipping '$line'\n" ;
		return 1 ;
	}
	if( (not defined $day) || ($day eq "") || ($day == 0) )
	{
		print "Cannot parse day, skipping '$line'\n" ;
		return 1 ;
	}
	$date = "$year$month$day" ;
	return ( 0, $rootname, $site, $date ) ;	# first parameter is error code, 0:allOK
}

sub parseconfig($$)	# parses root, site, dir, dir date and file from path, eg test/BML1/SortDir/AnalysisOptions_2010_06_19/AnalysisOptions.txt
{
	my ( $line, $matchdir ) = @_ ;
	my ( $rootname, $site, $dirname, $filename, $date ) = undef ;
	if( $line =~ m/^(.+)\/([^\/]+?)\/$matchdir\/([^\/]+?)\/(.+)$/ )	# (root)/(site)/$matchdir/(dir)/(file)
	{
		$rootname = $1 ;
		$site = $2 ;
		$dirname = $3 ;
		$filename = $4 ;
	}
	else
	{
		return 1 ;
	}
	if( (not defined $rootname) || ($rootname eq "") )
	{
		print "Cannot parse root name, skipping '$line'\n" ;
		return 1 ;
	}
	if( (not defined $site) || ($site eq "") )
	{
		print "Cannot parse site name, skipping '$line'\n" ;
		return 1 ;
	}
	if( (not defined $dirname) || ($dirname eq "") )
	{
		print "Cannot parse dir name, skipping '$line'\n" ;
		return 1 ;
	}
	if( (not defined $filename) || ($filename eq "") )
	{
		print "Cannot parse file name, skipping '$line'\n" ;
		return 1 ;
	}
	$date = getdate($dirname) ;	# AnalysisOptions_2010_06_19/AnalysisOptions.txt -> 2010-06-09
	if( not defined $date )
	{
		print "Cannot parse directory date, skipping '$line'\n" ;
		return 1 ;
	}
	return ( 0, $rootname, $site, $dirname, $date, $filename ) ;	# first parameter is error code, 0:allOK
}

sub sortlist($$$$)
{
	my ( $configlist, $path, $firstdate, $lastdate ) = @_ ;
	if( checkdate($firstdate) ) { return 1 ; }
	if( checkdate($lastdate) ) { return 1 ; }
	# scan the configlist for dates to build a date list
	my %datelist = () ;
	for my $entry ( @$configlist )
	{
		my $date = $entry->{date} ;
		$datelist{$date} = "" ;	# ignore dupes
		my $dir = $entry->{dir} ;
		my $file = $entry->{file} ;
		my $path = $entry->{path} ;
	}
	my $previous = $firstdate ;
	my @dates = sort ( keys %datelist ) ;
	push @dates, $lastdate ;
	# create subdirectories for each of the dates
	for my $date ( @dates )
	{
		my $dirname = "$path/$previous-$date" ;
		# create subdirectory dirname
		if( mkdirp($dirname) )
		{
			print "Error creating '$dirname'.\n" ;
			return 1 ;
		}
		# copy all relevant config files into dirname, based on dates
		if( collectfiles($configlist,$dirname,$previous,$date) )
		{
			print "Error collecting files for '$dirname'.\n" ;
			return 1 ;
		}
		$previous = $date ;
	}
	return 0 ;
}

sub collectfiles($$$$)		# put the appropriate version of each config file in its config subdirectory
{
	my ( $configlist, $dirname, $startdate, $enddate ) = @_ ;
	# configlist is a list of config files that need to be sorted
	# dirname is the name of the destination subdirectory for the sorted config files
	# startdate and enddate define the date range for config files in dirname
	if( checkdir($dirname) ) { return 1 ; }
	if( checkdate($startdate) ) { return 1 ; }
	if( checkdate($enddate) ) { return 1 ; }
	my $previousfile = undef ;
	my $bestentry = undef ;
	for my $entry ( @$configlist )	# find the most recent file whose mdate is before startdate
	{
		my $configfiledate = $entry->{date} ;
		my $configfilename = $entry->{file} ;
		$configfilename =~ s/_+$// ; # map potentially modified filenames to the original filename by deleting trailing '_' characters
		if( (defined $previousfile) && ($previousfile ne $configfilename) )
		{
			# the config filename just changed, so trigger a copy for the best entry
			if( not defined $bestentry )
			{
				print "Missing candidate for '$previousfile' in $dirname.\n" ;
				$previousfile = $configfilename ;
				next ;
			}
			if( collectfile($bestentry,$dirname) )
			{
				return 1 ;
			}
			$bestentry = undef ;	# no candidate yet for this filename
		}
		$previousfile = $configfilename ;
		if( $configfiledate <= $startdate )
		{
			$bestentry = $entry ;
		}
	}
	# deal with last file group
	if( defined $bestentry )
	{
		if( collectfile($bestentry,$dirname) )
		{
			return 1 ;
		}
	}
	return 0 ;
}

sub collectfile($$)
{
	my ( $bestentry, $dirname ) = @_ ;
	if( cpfile($bestentry->{path},$dirname) )
	{
		print "Error copying $bestentry->{path}\n" ;
		return 1 ;	# you might prefer to continue, but for now let's quit
	}
}

sub checkdir($)
{
	my ( $dirname ) = @_ ;
	if( ! -e $dirname )
	{
		print "Directory '$dirname' does not exist\n" ;
		return 1 ;
	}
	if( ! -d $dirname )
	{
		print "Not a directory: '$dirname'\n" ;
		return 1 ;
	}
	return 0 ;
}

sub checkdate($)
{
	my ( $date ) = @_ ;
	if( (not defined $date) || ($date eq "") )
	{
		print "Missing date value\n" ;
		return 1 ;
	}
}

sub getdate($)
{
	my ( $dirname ) = @_ ;
	my @parts = split /_/,$dirname ;
	#my $configname = $parts[0] ;
	my $year = $parts[1] ;
	if( (not defined $year) || ($year eq "") || ($year < 2000) || ($year > 2038) ) { return undef ; }
	my $month = $parts[2] ;
	if( (not defined $month) || ($month eq "") || ($month < 1) || ($month > 12) ) { return undef ; }
	my $day = $parts[3] ;
	if( (not defined $day) || ($day eq "") || ($day < 1) || ($day > 31) ) { return undef ; }
	my $date = "$year$month$day" ;
	return $date ;
}

sub mkdirp($)	# create directory path using mkdir with -p flag
{
	my ( $path ) = @_ ;
	my $command = "mkdir -p \"$path\"" ;
	my $result = `$command` ;
	my $err = $? ;
	if( $err )
	{
		print "Error creating $path\n" ;
		print "$result\n" ;
		return 1 ;
	}
	if( ! -d $path )
	{
		print "Missing path: $path\n" ;
		return 1 ;
	}
	return 0 ;
}

sub cpfile($$)	# copy from source file to destination directory with -p flag
{
	my ( $source, $destination ) = @_ ;	# 
	my $filename = basename($source) ;
	if( (not defined $filename) or ($filename eq "") )
	{
		print "Filename missing from $source\n" ;
		return 1 ;
	}
	my $destinationfile = "$destination/$filename" ;
	while( -e $destinationfile )
	{
		# file exists, dupecheck
		my $md5_s = getmd5($source) ;
		my $md5_d = getmd5($destinationfile) ;
		if( (not defined $md5_s) || ($md5_s eq "") )
		{
			print "Bad md5 for $source\n" ;
			return 1 ;
		}
		if( (not defined $md5_d) || ($md5_d eq "") )
		{
			print "Bad md5 for $destinationfile\n" ;
			return 1 ;
		}
		if( $md5_s eq $md5_d )
		{
			print "$source\t\tdup of\t\t$destinationfile\t$md5_s $md5_d\n" ;
			return 0 ;				# we're done
		}
		$destinationfile .= "_" ;			# rename new file and retry
	}
	my $command = "cp -p \"$source\" \"$destinationfile\"" ;
	my $result = `$command` ;
	my $err = $? ;
	if( $err )
	{
		print "Error copying file '$source' to '$destinationfile'\n" ;
		print "Result:$result\n" ;
		return 1 ;
	}
	if( ! -f $destinationfile )
	{
		print "Missing destination file: '$destinationfile'\n" ;
		return 1 ;
	}
	print "$source\t\tcopied to\t\t$destinationfile\n" ;
	return 0 ;
}

sub getmd5($)	# uses external executable rather than yet another perl module
{
	my ( $filename ) = @_ ;
	my $command = "md5 -q \"$filename\"" ;
	my $md5 = `$command` ;
	chomp($md5) ;
	return $md5 ;
}



exit main ;

#END
